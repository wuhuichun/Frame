#include "Msg.h"

Msg::Msg()
{
	//ctor

}

Msg::Msg(eCmd _cmd)
{
	//ctor
	this->m_cmd = _cmd;
}

Msg::Msg(const Msg & _Msg)
{
	m_len = _Msg.m_len;
	m_cmd = _Msg.m_cmd;

	mp_content = new char[m_len];
	memcpy(mp_content, _Msg.mp_content, m_len);

	//ctor
}

Msg::~Msg()
{
	//dtor
	if(mp_content != nullptr)
	{
		delete [] mp_content;
	}

}

void Msg::Decode(char* _pbuf){
		/* 包描述 cmd + 内容 才是真真的消息
	-------------------------------------------------------------
	| 0x02 0x02 | len | cmd | ********内容********** | 0x03 0X03 |
	-------------------------------------------------------------
		  2B       2B    4B          len-4B              2B

	测试数据：02 02 31 30 30 32 30 32 48 65 6C 6C 6F 20 03 03 0D
	*/
	const size_t lenLen = 2;
	const size_t cmdLen = 2;
	char lenBuf[lenLen] = {0};
	char cmdBuf[cmdLen] = {0};
	int pos = 0;
	m_decodePos = 0;
	// len
	memcpy(lenBuf, &(_pbuf[pos]), lenLen);
	pos += lenLen;
	m_len = atoi(lenBuf);

	// cmd
	memcpy(cmdBuf, &(_pbuf[pos]), lenLen);
	pos += lenLen;
	m_decodePos = pos;
	m_cmd = (eCmd)atoi(cmdBuf);

	// content
	mp_content = new char[m_len];
	memcpy(mp_content, _pbuf, m_len);

}

//
char Msg::GetChar()
{
	char ret;
	ret = mp_content[m_decodePos];
	m_decodePos += 1;

	return ret;
}

void  Msg::AddChar(char _value)
{

}

	//
std::string Msg::GetString()
{

}

void  Msg::AddString()
{

}

	//
int Msg::GetInt()
{
	char retBUf[4]  = {0};

	memcpy(retBUf, )
	ret = mp_buf[m_decodePos];
	m_decodePos += 1;

	return ch;

}

void  Msg::AddInt(int _value)
{

}

	//
long Msg::long GetLong()
{

}

void  Msg::AddLong(long long _value)
{

}

	//
float Msg::GetFloat()
{

}

void  Msg::AddFloat()
{

}

	//
double Msg::GetDouble()
{

}

void  Msg::AddDouble()
{

}

	//
bool Msg::GetBool()
{

}

void  Msg::AddBool()
{

}
